plugins {
	id 'java'
	id 'maven-publish'
	id 'org.springframework.boot' version '3.4.4'
	id 'io.spring.dependency-management' version '1.1.7'
}

group = 'com.modula'
version = '1.0.235'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

repositories {
	mavenCentral()
}

dependencyManagement {
	imports {
		mavenBom "org.springframework.boot:spring-boot-dependencies:3.4.4"
	}
}

dependencies {
	implementation 'org.springframework:spring-context'
	implementation 'org.springframework.data:spring-data-jpa'
	implementation 'org.hibernate.orm:hibernate-core'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'

	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

	compileOnly 'org.projectlombok:lombok:1.18.36'
	annotationProcessor 'org.projectlombok:lombok:1.18.36'

	testCompileOnly 'org.projectlombok:lombok:1.18.36'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.36'

	implementation 'org.mapstruct:mapstruct:1.5.3.Final'
	annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.3.Final'

	implementation("org.springframework:spring-context-support:6.2.5")
	implementation("com.sun.mail:jakarta.mail:2.0.1")

	implementation 'com.fasterxml.jackson.core:jackson-annotations:2.18.2'
	implementation 'org.apache.commons:commons-text:1.13.1'
	implementation 'com.fasterxml.jackson.core:jackson-databind'

}

tasks.named('test') {
	useJUnitPlatform()
}

bootJar {
	enabled = false
}

jar {
	enabled = true
}


def ensureTokenHasReadPackages() {
	try {
		def proc = "gh auth status".execute()
		proc.waitFor()
		def statusOutput = proc.in.text
		if (!statusOutput.contains("write:packages")) {
			throw new GradleException()
		}
	} catch(Exception e) {
		logger.warn("Failed to check token scopes via 'gh auth status'", e)
		throw new GradleException("‚ùå Token does not have the required 'write:packages' scope. Please run: gh auth refresh --scopes write:packages")
	}
}

def getGithubToken() {
	ensureTokenHasReadPackages()
	def token = System.getenv("GITHUB_TOKEN")
	if (!token) {
		try {
			def proc = "gh auth token".execute()
			proc.waitFor()
			token = proc.in.text.trim()
		} catch (Exception e) {
			logger.warn("Failed to get GitHub token via gh", e)
		}
	}
	println("Token: ${token[0..3]}${'*' * (token.length() - 9)}${token[-5..-1]}")
	return token ?: ""
}

def getGithubUser() {
	def user = System.getenv("GITHUB_USER")
	if (!user) {
		try {
			def proc = "gh api user --jq .login".execute()
			proc.waitFor()
			user = proc.in.text.trim()
		} catch (Exception e) {
			logger.warn("Failed to get GitHub username via gh", e)
		}
	}
	println("Username: ${user}")
	return user ?: ""
}


publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java

			pom {
				name = 'common-lib'
				description = 'Common library with shared DTOs, utils, etc.'
				url = 'https://github.com/ERP-Modula/common-lib'
				licenses {
					license {
						name = 'Apache License 2.0'
						url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
					}
				}
				scm {
					connection = 'scm:git:git://github.com/ERP-Modula/common-lib.git'
					developerConnection = 'scm:git:ssh://github.com:ERP-Modula/common-lib.git'
					url = 'https://github.com/ERP-Modula/common-lib'
				}
			}
		}
	}

	repositories {
		maven {
			name = 'GitHubPackages'
			url = uri("https://maven.pkg.github.com/ERP-Modula/common-lib")

			credentials {
				username = getGithubUser()
				password = getGithubToken()
			}
		}
	}
}